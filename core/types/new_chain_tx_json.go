// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/Tau-Coin/taucoin-mobile-mining-go/common"
	"github.com/Tau-Coin/taucoin-mobile-mining-go/common/hexutil"
)

var _ = (*NewChainTxDataMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (n NewChainTxData) MarshalJSON() ([]byte, error) {
	type NewChainTxData struct {
		Version     hexutil.Bytes   `json:"version"     gencodec:"required"`
		Option      hexutil.Bytes   `json:"option"      gencodec:"required"`
		ChainID     hexutil.Bytes   `json:"chainid"     gencodec:"required"`
		Nounce      hexutil.Uint64  `json:"nounce"      gencodec:"required"`
		TimeStamp   hexutil.Uint32  `json:"timestamp"   gencodec:"required"`
		Fee         hexutil.Bytes   `json:"fee"         gencodec:"required"`
		V           *hexutil.Big    `json:"v"           gencodec:"required"`
		R           *hexutil.Big    `json:"r"           gencodec:"required"`
		S           *hexutil.Big    `json:"s"           gencodec:"required"`
		Sender      *common.Address `json:"sender"        rlp:"required"`
		Name        hexutil.Bytes   `json:"name"      gencodec:"required"`
		Contact     hexutil.Bytes   `json:"contact"   gencodec:"required"`
		Title       hexutil.Bytes   `json:"title"     gencodec:"required"`
		Description hexutil.Bytes   `json:"description" gencodec:"requried"`
	}
	var enc NewChainTxData
	enc.Version = hexutil.Bytes(n.Version)
	enc.Option = hexutil.Bytes(n.Option)
	enc.ChainID = hexutil.Bytes(n.ChainID)
	enc.Nounce = hexutil.Uint64(n.Nounce)
	enc.TimeStamp = hexutil.Uint32(n.TimeStamp)
	enc.Fee = hexutil.Bytes(n.Fee)
	enc.V = (*hexutil.Big)(n.V)
	enc.R = (*hexutil.Big)(n.R)
	enc.S = (*hexutil.Big)(n.S)
	enc.Sender = n.Sender
	enc.Name = hexutil.Bytes(n.Name)
	enc.Contact = hexutil.Bytes(n.Contact)
	enc.Title = hexutil.Bytes(n.Title)
	enc.Description = hexutil.Bytes(n.Description)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (n *NewChainTxData) UnmarshalJSON(input []byte) error {
	type NewChainTxData struct {
		Version     *hexutil.Bytes  `json:"version"     gencodec:"required"`
		Option      *hexutil.Bytes  `json:"option"      gencodec:"required"`
		ChainID     *hexutil.Bytes  `json:"chainid"     gencodec:"required"`
		Nounce      *hexutil.Uint64 `json:"nounce"      gencodec:"required"`
		TimeStamp   *hexutil.Uint32 `json:"timestamp"   gencodec:"required"`
		Fee         *hexutil.Bytes  `json:"fee"         gencodec:"required"`
		V           *hexutil.Big    `json:"v"           gencodec:"required"`
		R           *hexutil.Big    `json:"r"           gencodec:"required"`
		S           *hexutil.Big    `json:"s"           gencodec:"required"`
		Sender      *common.Address `json:"sender"        rlp:"required"`
		Name        *hexutil.Bytes  `json:"name"      gencodec:"required"`
		Contact     *hexutil.Bytes  `json:"contact"   gencodec:"required"`
		Title       *hexutil.Bytes  `json:"title"     gencodec:"required"`
		Description *hexutil.Bytes  `json:"description" gencodec:"requried"`
	}
	var dec NewChainTxData
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Version == nil {
		return errors.New("missing required field 'version' for NewChainTxData")
	}
	n.Version = OneByte(*dec.Version)
	if dec.Option == nil {
		return errors.New("missing required field 'option' for NewChainTxData")
	}
	n.Option = OneByte(*dec.Option)
	if dec.ChainID == nil {
		return errors.New("missing required field 'chainid' for NewChainTxData")
	}
	n.ChainID = Byte32s(*dec.ChainID)
	if dec.Nounce == nil {
		return errors.New("missing required field 'nounce' for NewChainTxData")
	}
	n.Nounce = uint64(*dec.Nounce)
	if dec.TimeStamp == nil {
		return errors.New("missing required field 'timestamp' for NewChainTxData")
	}
	n.TimeStamp = uint32(*dec.TimeStamp)
	if dec.Fee == nil {
		return errors.New("missing required field 'fee' for NewChainTxData")
	}
	n.Fee = OneByte(*dec.Fee)
	if dec.V == nil {
		return errors.New("missing required field 'v' for NewChainTxData")
	}
	n.V = (*big.Int)(dec.V)
	if dec.R == nil {
		return errors.New("missing required field 'r' for NewChainTxData")
	}
	n.R = (*big.Int)(dec.R)
	if dec.S == nil {
		return errors.New("missing required field 's' for NewChainTxData")
	}
	n.S = (*big.Int)(dec.S)
	if dec.Sender != nil {
		n.Sender = dec.Sender
	}
	if dec.Name == nil {
		return errors.New("missing required field 'name' for NewChainTxData")
	}
	n.Name = Byte20s(*dec.Name)
	if dec.Contact == nil {
		return errors.New("missing required field 'contact' for NewChainTxData")
	}
	n.Contact = Byte32s(*dec.Contact)
	if dec.Title == nil {
		return errors.New("missing required field 'title' for NewChainTxData")
	}
	n.Title = Byte144s(*dec.Title)
	if dec.Description != nil {
		n.Description = Byte32s(*dec.Description)
	}
	return nil
}
