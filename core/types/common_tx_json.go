// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/Tau-Coin/taucoin-mobile-mining-go/common"
	"github.com/Tau-Coin/taucoin-mobile-mining-go/common/hexutil"
)

// MarshalJSON marshals as JSON.
func (g GeneralTx) MarshalJSON() ([]byte, error) {
	type GeneralTx struct {
		Version   hexutil.OneByte       `json:"version"    gencodec:"required"`
		Option    hexutil.OneByte       `json:"option"     gencodec:"required"`
		ChainID   hexutil.Byte32        `json:"chainid"  gencodec:"required"`
		Nounce    hexutil.Uint64        `json:"nounce"     gencodec:"required"`
		TimeStamp hexutil.Uint32        `json:"timestamp"   gencodec:"required"`
		Fee       hexutil.OneByte       `json:"fee"         gencodec:"required"`
		Signature TXSignatureMarshaling `json:"signature"   gencodec:"required"`
		Sender    *common.Address       `json:"sender"        rlp:"required"`
	}
	var enc GeneralTx
	enc.Version = g.Version
	enc.Option = g.Option
	enc.ChainID = g.ChainID
	enc.Nounce = g.Nounce
	enc.TimeStamp = g.TimeStamp
	enc.Fee = g.Fee
	enc.Signature = g.Signature
	enc.Sender = g.Sender
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *GeneralTx) UnmarshalJSON(input []byte) error {
	type GeneralTx struct {
		Version   *hexutil.OneByte       `json:"version"    gencodec:"required"`
		Option    *hexutil.OneByte       `json:"option"     gencodec:"required"`
		ChainID   *hexutil.Byte32        `json:"chainid"  gencodec:"required"`
		Nounce    *hexutil.Uint64        `json:"nounce"     gencodec:"required"`
		TimeStamp *hexutil.Uint32        `json:"timestamp"   gencodec:"required"`
		Fee       *hexutil.OneByte       `json:"fee"         gencodec:"required"`
		Signature *TXSignatureMarshaling `json:"signature"   gencodec:"required"`
		Sender    *common.Address        `json:"sender"        rlp:"required"`
	}
	var dec GeneralTx
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Version == nil {
		return errors.New("missing required field 'version' for GeneralTx")
	}
	g.Version = *dec.Version
	if dec.Option == nil {
		return errors.New("missing required field 'option' for GeneralTx")
	}
	g.Option = *dec.Option
	if dec.ChainID == nil {
		return errors.New("missing required field 'chainid' for GeneralTx")
	}
	g.ChainID = *dec.ChainID
	if dec.Nounce == nil {
		return errors.New("missing required field 'nounce' for GeneralTx")
	}
	g.Nounce = *dec.Nounce
	if dec.TimeStamp == nil {
		return errors.New("missing required field 'timestamp' for GeneralTx")
	}
	g.TimeStamp = *dec.TimeStamp
	if dec.Fee == nil {
		return errors.New("missing required field 'fee' for GeneralTx")
	}
	g.Fee = *dec.Fee
	if dec.Signature == nil {
		return errors.New("missing required field 'signature' for GeneralTx")
	}
	g.Signature = *dec.Signature
	if dec.Sender != nil {
		g.Sender = dec.Sender
	}
	return nil
}
