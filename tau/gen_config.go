// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package tau

import (
	"time"

	"github.com/Tau-Coin/taucoin-mobile-mining-go/common"
	"github.com/Tau-Coin/taucoin-mobile-mining-go/consensus/tauhash"
	"github.com/Tau-Coin/taucoin-mobile-mining-go/core"
	"github.com/Tau-Coin/taucoin-mobile-mining-go/miner"
	"github.com/Tau-Coin/taucoin-mobile-mining-go/params"
	"github.com/Tau-Coin/taucoin-mobile-mining-go/tau/downloader"
)

// MarshalTOML marshals as TOML.
func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		Genesis         *core.Genesis `toml:",omitempty"`
		NetworkId       uint64
		SyncMode        downloader.SyncMode
		NoPruning       bool
		NoPrefetch      bool
		Whitelist       map[uint64]common.Hash `toml:"-"`
		DatabaseHandles int                    `toml:"-"`
		DatabaseCache   int
		DatabaseFreezer string
		TrieCleanCache  int
		TrieDirtyCache  int
		TrieTimeout     time.Duration
		Miner           miner.Config
		Tauash          tauhash.Config
		TxPool          core.TxPoolConfig
		DocRoot         string                    `toml:"-"`
		Checkpoint      *params.TrustedCheckpoint `toml:",omitempty"`
	}
	var enc Config
	enc.Genesis = c.Genesis
	enc.NetworkId = c.NetworkId
	enc.SyncMode = c.SyncMode
	enc.NoPruning = c.NoPruning
	enc.NoPrefetch = c.NoPrefetch
	enc.Whitelist = c.Whitelist
	enc.DatabaseHandles = c.DatabaseHandles
	enc.DatabaseCache = c.DatabaseCache
	enc.DatabaseFreezer = c.DatabaseFreezer
	enc.TrieCleanCache = c.TrieCleanCache
	enc.TrieDirtyCache = c.TrieDirtyCache
	enc.TrieTimeout = c.TrieTimeout
	enc.Miner = c.Miner
	enc.Tauash = c.Tauash
	enc.TxPool = c.TxPool
	enc.DocRoot = c.DocRoot
	enc.Checkpoint = c.Checkpoint
	return &enc, nil
}

// UnmarshalTOML unmarshals from TOML.
func (c *Config) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type Config struct {
		Genesis         *core.Genesis `toml:",omitempty"`
		NetworkId       *uint64
		SyncMode        *downloader.SyncMode
		NoPruning       *bool
		NoPrefetch      *bool
		Whitelist       map[uint64]common.Hash `toml:"-"`
		DatabaseHandles *int                   `toml:"-"`
		DatabaseCache   *int
		DatabaseFreezer *string
		TrieCleanCache  *int
		TrieDirtyCache  *int
		TrieTimeout     *time.Duration
		Miner           *miner.Config
		Tauash          *tauhash.Config
		TxPool          *core.TxPoolConfig
		DocRoot         *string                   `toml:"-"`
		Checkpoint      *params.TrustedCheckpoint `toml:",omitempty"`
	}
	var dec Config
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Genesis != nil {
		c.Genesis = dec.Genesis
	}
	if dec.NetworkId != nil {
		c.NetworkId = *dec.NetworkId
	}
	if dec.SyncMode != nil {
		c.SyncMode = *dec.SyncMode
	}
	if dec.NoPruning != nil {
		c.NoPruning = *dec.NoPruning
	}
	if dec.NoPrefetch != nil {
		c.NoPrefetch = *dec.NoPrefetch
	}
	if dec.Whitelist != nil {
		c.Whitelist = dec.Whitelist
	}
	if dec.DatabaseHandles != nil {
		c.DatabaseHandles = *dec.DatabaseHandles
	}
	if dec.DatabaseCache != nil {
		c.DatabaseCache = *dec.DatabaseCache
	}
	if dec.DatabaseFreezer != nil {
		c.DatabaseFreezer = *dec.DatabaseFreezer
	}
	if dec.TrieCleanCache != nil {
		c.TrieCleanCache = *dec.TrieCleanCache
	}
	if dec.TrieDirtyCache != nil {
		c.TrieDirtyCache = *dec.TrieDirtyCache
	}
	if dec.TrieTimeout != nil {
		c.TrieTimeout = *dec.TrieTimeout
	}
	if dec.Miner != nil {
		c.Miner = *dec.Miner
	}
	if dec.Tauash != nil {
		c.Tauash = *dec.Tauash
	}
	if dec.TxPool != nil {
		c.TxPool = *dec.TxPool
	}
	if dec.DocRoot != nil {
		c.DocRoot = *dec.DocRoot
	}
	if dec.Checkpoint != nil {
		c.Checkpoint = dec.Checkpoint
	}
	return nil
}
